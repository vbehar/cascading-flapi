/*
   Copyright 2013 the original author or authors.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

/* Project definition */

description = 'Fluent API for Cascading, generated with Flapi'
group = 'cascading-flapi'

defaultTasks 'build'

/* Java project */

apply plugin: 'java'
apply plugin: 'maven'
apply from: 'gradle/maven.gradle'

sourceCompatibility = 1.6
targetCompatibility = 1.6

/* Handle Java code generation by Flapi */

sourceSets {
  generator // the generator main class is in src/generator/java
}

// generate the java code after the compilation of the generator
compileGeneratorJava.doLast {
  file("$buildDir/generated-src").mkdirs()
  javaexec {
    classpath = sourceSets.generator.runtimeClasspath
    main = 'cascading.flapi.pipe.PipeBuilderGenerator'
    args = ["$buildDir/generated-src"] // outputDir
  }
}

task compileGeneratedSrcJava (type: JavaCompile, dependsOn: 'compileGeneratorJava') {
  description = "Compile the generated Java sources files"
  classpath = sourceSets.generator.runtimeClasspath
  source = "$buildDir/generated-src"
  destinationDir = file("$buildDir/classes/generated-src")
}
task generateApi (dependsOn: 'compileGeneratedSrcJava') // alias

compileJava.dependsOn generateApi

/* Testing */

test { 
  testLogging.exceptionFormat "full"
}

/* Packaging */

jar {
  from "$buildDir/classes/generated-src" // also include generated classes
}
javadoc {
  source = sourceSets.main.allJava + files("$buildDir/generated-src")
  excludes = ["unquietcode"]
  classpath += configurations.provided
}

task sourcesJar(type: Jar, dependsOn: classes) {
  description = "Package a jar of the Java sources"
  classifier = 'sources'
  from sourceSets.main.allSource + files("$buildDir/generated-src")
}
task javadocJar(type: Jar, dependsOn: javadoc) {
  description = "Package a jar of the javadoc"
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives jar, sourcesJar, javadocJar
}

/* Publishing */

apply plugin: 'signing'
signing {
  required { gradle.taskGraph.hasTask(uploadArchives) } // only sign when publishing
  sign configurations.archives
}
uploadArchives {
  repositories.mavenDeployer {
    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
    repository(url: "http://conjars.org/repo/") {
      authentication(userName: "$conjarsUsername", password: "$conjarsPassword")
    }
    pom.project {
      name project.name
      description project.description
      inceptionYear '2013'
      packaging 'jar'
      url 'https://github.com/vbehar/cascading-flapi'
      scm {
        url 'https://github.com/vbehar/cascading-flapi.git'
      }
      ciManagement {
        system 'Jenkins'
        url 'https://buildhive.cloudbees.com/job/vbehar/job/cascading-flapi/'
      }
      issueManagement {
        system 'GitHub'
        url 'https://github.com/vbehar/cascading-flapi/issues'
      }
      licenses {
        license {
          name 'The Apache Software License, Version 2.0'
          url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          distribution 'repo'
        }
      }
    }
  }
}
task publish (dependsOn: 'uploadArchives') // alias

/* Release */

buildscript {
  dependencies {
    classpath 'com.github.townsfolk:gradle-release:1.2'
  }
  repositories {
    mavenCentral()
    mavenRepo name: 'sonatype', url: 'https://oss.sonatype.org/content/groups/public'
  }
}
apply plugin: 'release'
release {
  preTagCommitMessage = '[Gradle Release Plugin] - release version '
  tagCommitMessage = '[Gradle Release Plugin] - tag version '
  newVersionCommitMessage = '[Gradle Release Plugin] - next version: '
}
createReleaseTag.dependsOn publish

/* Dependencies */

dependencies {
  provided 'cascading:cascading-core:2.1.6'
  provided 'org.slf4j:slf4j-api:1.7.5'
  compile files("$buildDir/classes/generated-src") {
    builtBy 'compileGeneratedSrcJava'
  }

  generatorCompile 'cascading:cascading-core:2.1.6'
  generatorCompile 'unquietcode.tools.flapi:flapi:0.3'

  testCompile 'junit:junit:4.11'
  testCompile 'org.assertj:assertj-core:1.2.0'
  testCompile 'org.slf4j:slf4j-simple:1.7.5'
  testCompile 'org.apache.commons:commons-io:1.3.2'
  testCompile 'com.google.guava:guava:14.0.1'
  testCompile 'cascading:cascading-local:2.1.6'
}

repositories {
  mavenCentral()
  mavenRepo name: 'unquietcode', url: 'http://www.unquietcode.com/maven/releases' // for flapi
  mavenRepo name: 'conjars', url: 'http://conjars.org/repo/' // for cascading
}

/* IDE */

apply plugin: 'eclipse'
eclipse.classpath {
  plusConfigurations += [configurations.provided, configurations.generatorCompile]
  file.whenMerged { classpath ->
    // link the generated sources with their compiled classes
    classpath.entries.find { entry -> entry.path.contains('build/classes/generated-src') }.sourcePath = new org.gradle.plugins.ide.eclipse.model.internal.FileReferenceFactory().fromPath("build/generated-src")
  }
}

apply plugin: 'idea'
idea {
  module {
    scopes.COMPILE.plus += configurations.generatorCompile
    scopes.PROVIDED.plus += configurations.provided
  }
}

